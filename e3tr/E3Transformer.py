import torch
from torch import nn
# import dgl
# from dgl import function as fn
# from dgl.nn.functional import edge_softmax
# from dgl.base import DGLError
# from dgl.nn.pytorch.utils import Identity
# from dgl.utils import expand_as_pair
import math
import warnings
import numpy as np

def drop_path(x, drop_prob: float = 0., training: bool = False):
    if drop_prob == 0. or not training:
        return x
    keep_prob = 1 - drop_prob
    shape = (x.shape[0],) + (1,) * (x.ndim - 1)  # work with diff dim tensors, not just 2D ConvNets
    random_tensor = keep_prob + torch.rand(shape, dtype=x.dtype, device=x.device)
    random_tensor.floor_()  # binarize
    output = x.div(keep_prob) * random_tensor
    return output


class DropPath(nn.Module):
    """Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks).
    """
    def __init__(self, drop_prob=None):
        super(DropPath, self).__init__()
        self.drop_prob = drop_prob

    def forward(self, x):
        return drop_path(x, self.drop_prob, self.training)



def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


class RBFExpansion(nn.Module):

    def __init__(self, low=0., high=30., gap=0.1):
        super(RBFExpansion, self).__init__()

        self.num_centers = int(np.ceil((high - low) / gap))
        #self.centers = np.linspace(low, high, self.num_centers)
        self.register_buffer('centers',torch.tensor(np.linspace(low, high, self.num_centers)).float())
        self.gamma = 1 / gap

    def forward(self, edge_dists):
        radial = edge_dists - self.centers
        coef = - self.gamma
        return torch.exp(coef * (radial ** 2))


class VNLeakyReLU(nn.Module):
    def __init__(self, in_channels, share_nonlinearity=False, negative_slope=0.2):
        super(VNLeakyReLU, self).__init__()
        if share_nonlinearity == True:
            self.map_to_dir = nn.Linear(in_channels, 1, bias=False)
        else:
            self.map_to_dir = nn.Linear(in_channels, in_channels, bias=False)
        self.negative_slope = negative_slope
    
    def forward(self, x):
        '''
        x: point features of shape [B,...,3, N_feat]
        '''
        d = self.map_to_dir(x)
        dotprod = (x*d).sum(-2, keepdim=True)
        mask = (dotprod >= 0).float()
        d_norm_sq = (d*d).sum(-2, keepdim=True)
        x_out = self.negative_slope * x + (1-self.negative_slope) * (mask*x + (1-mask)*(x-(dotprod/(d_norm_sq+1e-5))*d))
        return x_out

class VNLayerNorm(nn.Module):
    def __init__(self, num_features, eps =1e-5 ):
        super(VNLayerNorm, self).__init__()
        self.ln = nn.LayerNorm(num_features)
        self.eps = eps
    def forward(self, x):
        '''
        x: point features of shape [B, ... ,3,N_feat]
        '''
        # norm = torch.sqrt((x*x).sum(2))
        norm = torch.linalg.norm(x, dim=-2,keepdim=False) + self.eps
        norm_ln = self.ln(norm)
        norm = norm.unsqueeze(-2)
        norm_ln = norm_ln.unsqueeze(-2)
        x = x / norm * norm_ln
        return x

class Mlp(nn.Module):
    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU(), drop=0.):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.act = act_layer
        if isinstance(act_layer,nn.GELU):
            self.fc1 = nn.Linear(in_features, hidden_features)
            self.fc2 = nn.Linear(hidden_features, out_features)
        elif isinstance(act_layer,VNLeakyReLU):
            self.fc1 = nn.Linear(in_features, hidden_features,bias=False)
            self.fc2 = nn.Linear(hidden_features, out_features,bias=False)            
        self.drop = nn.Dropout(drop)

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        return x


class E3Attention(nn.Module):

    def __init__(self,
                 dim_in,
                 vdim_out,
                 num_heads,
                 proj_drop,
                 attn_drop,
                 qkv_bias,
                 ignore_index,
                 RBF_low,
                 RBF_high,
                 RBF_gap,
                 use_cross = True,
                 negative_slope=None): #if none nn.GELU else leakyrelu
        super(E3Attention, self).__init__()
        self.ignore_index = ignore_index
        self.num_heads = num_heads
        self.dim_in = dim_in
        self.vdim_out = vdim_out
        self.RBF = RBFExpansion(RBF_low,RBF_high,RBF_gap)
        self.dim_edge = self.RBF.num_centers
        self.scale =  (2*dim_in/num_heads)** -0.5 # 2* from https://github.com/lucidrains/invariant-point-attention/blob/main/invariant_point_attention/invariant_point_attention.py
        self.proj = nn.Linear(self.dim_edge+dim_in, dim_in)
        
        self.edge2attn = nn.Linear(self.dim_edge,num_heads)
        self.edge2value = nn.Linear(self.dim_edge,self.dim_edge//num_heads)
        self.get_q = nn.Linear(dim_in, dim_in, bias=qkv_bias)
        self.get_k = nn.Linear(dim_in, dim_in, bias=qkv_bias)
        self.get_v = nn.Linear(dim_in, dim_in, bias=qkv_bias)

        self.vector_edge2attn = nn.Linear(self.dim_edge,vdim_out)
        self.get_vector_q = nn.Linear(dim_in, vdim_out, bias=qkv_bias)
        self.get_vector_k = nn.Linear(dim_in, vdim_out, bias=qkv_bias)

        self.proj_drop = nn.Dropout(proj_drop)
        self.attn_drop = nn.Dropout(attn_drop)
        if negative_slope is None:
            self.act = nn.GELU()
        else:
            self.act = nn.LeakyReLU(negative_slope)
        self.use_cross = use_cross

    def forward(self, scalar_q,coord_q,label_q, scalar_kv=None,coord_kv=None,label_kv=None,armsk=None):
        if label_kv is None:
            scalar_kv = scalar_q
            coord_kv = coord_q
            label_kv = label_q
        ig_q = label_q == self.ignore_index
        if not(armsk is None):
            mask = armsk | (ig_q.unsqueeze(2)|ig_q.unsqueeze(1))
        else:
            mask = (ig_q.unsqueeze(2)|(label_kv == self.ignore_index).unsqueeze(1))#B,N1,N2
        # else:
        #     #mask B N
        #     mask = label_q == self.ignore_index
        #     mask = (mask.unsqueeze(1)|mask.unsqueeze(2))

        #coord B N 3
        vector_diff = coord_q.unsqueeze(2)-coord_kv.unsqueeze(1) #B N1 1 3 - B 1 N2 3 = B N1 N2 3
        dist = torch.linalg.norm(vector_diff,dim=-1,keepdim=True)
        direction = vector_diff/(dist+1e-5) #B,N1,N2,3
        edge_feat = self.RBF(dist) #B,N1,N2,rbfcenters

        B,N1,C = scalar_q.shape
        B,N2,C = scalar_kv.shape
        q = self.get_q(scalar_q).reshape(B, N1, self.num_heads, C // self.num_heads).transpose(2, 1) # B,H,N1,C//h
        k = self.get_k(scalar_kv).reshape(B, N2, self.num_heads, C // self.num_heads).transpose(2, 1) # B,H,N2,C//h
        v = self.get_v(scalar_kv).reshape(B, N2, self.num_heads, C // self.num_heads).transpose(2, 1) # B,H,N2,C//h

        attn_logits =(q @ k.transpose(-2, -1)) * self.scale #B H N1 N2
        attn_logits = attn_logits + self.edge2attn(edge_feat).permute(0, 3, 1, 2)*0.707 # * 2**-0.5 same with self.scale 
        attn_logits = attn_logits.masked_fill(mask.unsqueeze(1), float('-inf'))
        attn = attn_logits.softmax(dim=-1) 
        attn = attn.masked_fill(mask.unsqueeze(1), 0.) # to avoid NaN for full -inf lines
        attn = self.attn_drop(attn)
        
        from_scalar = (attn @ v).transpose(1, 2).reshape(B, N1, C) # (B, H, N1, N2) x (B, H, N2, C//h) -> (B, H, N1, C//h)
        from_dist = torch.einsum('b h i j, b i j d -> b h i d', attn, self.edge2value(edge_feat)).transpose(1, 2).reshape(B, N1, -1) # (B, H, N1, N2) x (B, N1, N2, rc//H) -> (B, H, N1, rc//H)
        result_scalar = torch.cat([from_scalar,from_dist],dim=-1)
        result_scalar = self.proj_drop(self.proj(result_scalar))
        
        vector_q = self.get_vector_q(scalar_q).view(B,N1,self.vdim_out) 
        vector_k = self.get_vector_k(scalar_kv).view(B,N2,self.vdim_out)
        vector_weight = self.vector_edge2attn(edge_feat)
        vector_weight = vector_weight*torch.tanh(vector_q.unsqueeze(2)+vector_k.unsqueeze(1))
        vector_weight = vector_weight.masked_fill(mask.unsqueeze(-1), 0.).unsqueeze(-1) #B N1 N2 vd 1
        direction_update = (direction.unsqueeze(3)*vector_weight).sum(dim=-3) # B N1 N2 1 3 * B N1 N2 vd 1 -> B N1 N2 vd 3 -> B N1 vd 3
        if self.use_cross:
            headswarp = direction_update[:,:,list(range(1,self.vdim_out))+[0],:]
            aftercross = torch.cross(direction_update,headswarp,dim=-1)
            direction_update = torch.cat([direction_update,aftercross],dim=2)#B N1 2vd 3
        return result_scalar,direction_update

class TFBlock(nn.Module):
    def __init__(self, 
                 dim_in,
                 vdim_in,
                 num_heads,
                 proj_drop,
                 attn_drop,
                 qkv_bias,
                 ignore_index,
                 RBF_low,
                 RBF_high,
                 RBF_gap,
                 negative_slope,
                 mlp_ratio,
                 mlp_act_layer,
                 mlp_drop,
                 drop_path,
                 use_cross = True,
                 cross_attn = False):

        super().__init__()
        self.norm1 = nn.LayerNorm(dim_in)
        self.attn = E3Attention(dim_in,vdim_in,num_heads,proj_drop,attn_drop,qkv_bias,ignore_index,RBF_low,RBF_high,RBF_gap,use_cross,negative_slope)
        self.use_cross_attn = cross_attn
        if cross_attn:
            self.norm2 = nn.LayerNorm(dim_in)
            self.cross_attn = E3Attention(dim_in,vdim_in,num_heads,proj_drop,attn_drop,qkv_bias,ignore_index,RBF_low,RBF_high,RBF_gap,use_cross,negative_slope)
            vdim_in = vdim_in*2

        self.norm = nn.LayerNorm(dim_in)
        mlp_hidden_dim = int(dim_in * mlp_ratio)
        self.mlp = Mlp(in_features=dim_in, hidden_features=mlp_hidden_dim, act_layer=mlp_act_layer, drop=mlp_drop)
        if use_cross:
            vdim_in = vdim_in*2
        self.vmlp = Mlp(in_features=vdim_in, hidden_features=vdim_in*mlp_ratio,out_features=1, act_layer=VNLeakyReLU(vdim_in*mlp_ratio), drop=mlp_drop)
        self.vnorm = VNLayerNorm(vdim_in)            
        
        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()
    def forward(self, scalar_q,coord_q,label_q, scalar_kv=None,coord_kv=None,label_kv=None,armsk=None):
        assert self.use_cross_attn ^ (label_kv is None)
        
        y = self.norm1(scalar_q)
        y,direction_update = self.attn(scalar_q,coord_q,label_q,armsk = armsk)
        scalar_q = scalar_q + self.drop_path(y)

        if self.use_cross_attn:
            y = self.norm2(scalar_q)
            y,direction_update2 = self.cross_attn(scalar_q,coord_q,label_q, scalar_kv,coord_kv,label_kv)
            scalar_q = scalar_q + self.drop_path(y)
            direction_update = torch.cat([direction_update,direction_update2],dim = 2)
        
        scalar_q = scalar_q + self.drop_path(self.mlp(self.norm(scalar_q)))

        direction_update = self.drop_path(self.vmlp(self.vnorm(direction_update.transpose(-1,-2))))
        coord_q = coord_q + direction_update.squeeze(-1)
        
        #20220411 for debug
        # direction_update = self.vnorm(direction_update.transpose(-1,-2))
        # direction_update = direction_update.transpose(-1,-2).mean(dim=-2)
        # coord = coord+direction_update.squeeze(-1)
        
        return scalar_q,coord_q

class E3TF_SA(nn.Module):
    def __init__(self,
                 dim_in=256,
                 vdim_in=32,
                 num_heads=4,
                 proj_drop=0.,
                 attn_drop=0.,
                 qkv_bias = False,
                 ignore_index = 10,
                 RBF_low =0,
                 RBF_high = 25.6,
                 RBF_gap = 0.1,
                 negative_slope=None,
                 mlp_ratio=4,
                 mlp_act_layer=nn.GELU(),
                 mlp_drop=0.1,
                 drop_path=0.1,    
                 num_node_types=10,
                 depth=6,
                 use_cross = True,
                 out_node=6):
        super().__init__()
        if num_node_types>0:
            self.embed = nn.Embedding(num_node_types+1, dim_in,scale_grad_by_freq=True,padding_idx=ignore_index)
        dpr = [x.item() for x in torch.linspace(0, drop_path, depth)]  # stochastic depth decay rule
        self.blocks = nn.ModuleList([
            TFBlock(dim_in,vdim_in,num_heads,proj_drop,attn_drop,qkv_bias,ignore_index,RBF_low,RBF_high,RBF_gap,
                    negative_slope,mlp_ratio,mlp_act_layer,mlp_drop,drop_path=dpr[i],use_cross=use_cross,cross_attn = False)
            for i in range(depth)])
        if out_node>0:
            self.head = Mlp(dim_in,dim_in,out_node)
        self.apply(self._init_weights)

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)

    def forward(self,coord,label,node_feats=None,posemb=None,armsk=None,classify=False):
        if node_feats is None:
            node_feats = self.embed(label)
        if not(posemb is None):
            node_feats = node_feats+posemb
        for tf in self.blocks:
            node_feats,coord = tf(node_feats,coord,label,armsk=armsk)
        if classify:
            node_feats = self.head(node_feats)
        # g.ndata['h'] = node_feats
        # node_feats = dgl.mean_nodes(g, 'h')
        # node_feats = self.mlp(node_feats)
        return node_feats,coord


if __name__ == '__main__':
    #test self attention
    coord_prot = torch.rand(3,256,3)#.cuda()
    node_aa = torch.randint(0,10,(3,256))#.cuda()
    encoder = E3TF_SA(depth=1)
    #encoder = encoder.cuda()
    feat,coord = encoder(coord_prot,node_aa)


